openapi: 3.0.0
info:
  title: stepout api
  version: "1.0"
servers:
  - url: /api/v1
paths:
  /user/register:
      post:
        tags:
          - user
        description: input with form-data 
        consumes:
          - multipart/form-data
        produces:
          - multipart/form-data
        requestBody:
          required: true
          content:
            multipart/form-data:
              schema:
                type: object
                required:
                  - student_id
                properties:
                  student_id:
                    type: string
                    example: 6630000021
                  first_name:
                    type: string
                    example: John
                  last_name:
                    type: string
                    example: Doe
                  nick_name:
                    type: string
                    example: Joe
                  year:
                    type: string
                    example: "1"
                    enum:
                      - "1"
                      - "2"
                      - "3"
                      - "4"
                      - "graduated"
                  major:
                    type: string
                    example: "CEDT"
                  role:
                    type: string
                    example: "admin"
                    enum:
                      - admin
                      - user
                      - pending
                      - member
                      - core
                  password:
                    type: string
                    example: "666"
                  image:
                    type: file
                    example: "https://stepoutsite.s3.ap-southeast-1.amazonaws.com/image/6633074721.webp"
                  telephone:
                    type: string
                    example: "0123456789"
                  instagram:
                    type: string
                    example: "stepout_intania"
                  line:
                    type: string
                    example: "@stepoutintania"
        responses:
          "200":
            description: OK
            content:
              application/json:
                example:
                  message: successfully create user
          "400":
            description: Bad Request
            content:
              application/json:
                example:
                  message: user already exist
  /user/login:
      post:
        tags:
          - user
        description: input with student_id and password
        consumes:
          - application/json
        produces:
          - application/json
        requestBody:
          required: true
          content:
            application/json:
              example:
                student_id: "6630000021"
                password: "666"
        responses:
          "200":
            description: OK
            content:
              application/json:
                example:
                  message: successfully login
                  data: eyJhuadhiaiwudhuhsiudu
          "400":
            description: Bad Request
            content:
              application/json:
                example:
                  message: user not found
  /user/logout:
      post:
        tags:
          - user
        description: log out
        security:
        - bearerAuth: []
        consumes:
          - application/json
        produces:
          - application/json
        responses:
          "200":
            description: OK
            content:
              application/json:
                example:
                  message: successfully logout
          "401":
            description: Unauthorized
            content:
              application/json:
                example:
                  message: Unauthorization Token.
  /user/get_users:
    post:
      tags:
        - user
      description: required a body. The body use to filter. 
        If you want don't want to filter just send {}
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
          required: true
          content:
            application/json:
              example:
                role: admin
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: successfully get all users
                data: []
        "401":
            description: Unauthorized
            content:
              application/json:
                example:
                  message: Unauthorization Token.
  /user/me:
    get:
      tags:
        - user
      description: get me
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: successfully get user
                data: {}
        "401":
            description: Unauthorized
            content:
              application/json:
                example:
                  message: Unauthorization Token.
  /user/update:
    put:
      tags:
        - user
      security:
        - bearerAuth: []
      consumes:
        - multipart/form-data
      produces:
        - multipart/form-data
      parameters:
        - in: query
          name: student_id
          schema:
            type: string
          required: false
      description: if user role is lower than core, no student_id required it will update own student_id.
          if user role is greater than core , student_id is use to update that user.
          student_id can't be updated.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                nick_name:
                  type: string
                  example: Joe
                year:
                  type: string
                  example: "1"
                  enum:
                    - "1"
                    - "2"
                    - "3"
                    - "4"
                    - "graduated"
                major:
                  type: string
                  example: "CEDT"
                role:
                  type: string
                  example: "admin"
                  enum:
                    - admin
                    - user
                    - pending
                    - member
                    - core
                password:
                  type: string
                  example: "666"
                image:
                  type: file
                  example: "https://stepoutsite.s3.ap-southeast-1.amazonaws.com/image/6633074721.webp"
                telephone:
                  type: string
                  example: "0123456789"
                instagram:
                  type: string
                  example: "stepout_intania"
                line:
                  type: string
                  example: "@stepoutintania"
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: successfully update user
        "401":
            description: Unauthorized
            content:
              application/json:
                example:
                  message: Unauthorization Token.
  /user/delete:
    delete:
      tags:
        - user
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: student_id
          schema:
            type: string
          required: true
      description: if user role is lower than core, sent parameter to their own student_id.
          if user role is greater than core , student_id is use to delete that user.
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: successfully delete user
        "401":
            description: Unauthorized
            content:
              application/json:
                example:
                  message: Unauthorization Token.
  /kneepads/create:
    post:
      tags:
        - kneepads
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kneepads'
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: "successfully create kneepads"
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                message: "Unauthorization Token."
  /kneepads/get_one:
    get:
      tags:
        - kneepads
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: number
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: "successfully get kneepads"
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                message: "Unauthorization Token."
  /kneepads/get_all:
    get:
      tags:
        - kneepads
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: "successfully get all kneepads"
                data: []
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                message: "Unauthorization Token."
  /kneepads/update:
    put:
      tags:
        - kneepads
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: number
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kneepads'
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: "successfully update kneepads"
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                message: "Unauthorization Token."
  /kneepads/delete:
    delete:
      tags:
        - kneepads
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: number
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: "successfully delete kneepads"
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                message: "Unauthorization Token."
  /event/create:
    post:
      tags:
        - event
      security:
        - bearerAuth: []
      description: input with form-data. The song data fill in form with key song[0] for the first song, song[1] for the second song, ...
      consumes:
        - multipart/form-data
      produces:
        - multipart/form-data
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - event_name
              properties:
                event_name:
                  type: string
                  example: Freshy Game 2029
                day:
                  type: string
                  example: 10/08/2029
                time:
                  type: string
                  example: 18:00
                place:
                  type: string
                  example: LarnIntania
                song[0]:
                  type: string
                  example: feat
                song[1]:
                  type: string
                  example: hot2hot
                description:
                  type: string
                  example: โชว์สุดปังขนาดนี้จะพลาดได้ไง ₊⊹ 13.09.2024 @ Thephasadin Stadium หน้าสแตนด์เชียร์ฝั่งประตูใหญ่ 20.00 onwards
                image:
                  type: file
                  example: "https://stepoutsite.s3.ap-southeast-1.amazonaws.com/image/FreshyGame2024.webp"
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: "successfully create event"
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                message: "Unauthorization Token."
  /event/get_all:
    get:
      tags:
        - event
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: "successfully get all events"
                data: []
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                message: "Unauthorization Token."
  /event/update:
    put:
      tags:
        - event
      security:
        - bearerAuth: []
      description: if you want to update song data then you must get the old array and then append/delete.
      consumes:
        - multipart/form-data
      produces:
        - multipart/form-data
      parameters:
        - in: query
          name: event_name
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                event_name:
                  type: string
                  example: Freshy Game 2029
                day:
                  type: string
                  example: 10/08/2029
                time:
                  type: string
                  example: 18:00
                place:
                  type: string
                  example: LarnIntania
                song[0]:
                  type: string
                  example: feat
                song[1]:
                  type: string
                  example: hot2hot
                description:
                  type: string
                  example: โชว์สุดปังขนาดนี้จะพลาดได้ไง ₊⊹ 13.09.2024 @ Thephasadin Stadium หน้าสแตนด์เชียร์ฝั่งประตูใหญ่ 20.00 onwards
                image:
                  type: file
                  example: "https://stepoutsite.s3.ap-southeast-1.amazonaws.com/image/FreshyGame2024.webp"
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: "successfully update event"
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                message: "Unauthorization Token."
  /event/delete:
    delete:
      tags:
        - event
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: event_name
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              example:
                message: "successfully delete event"
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                message: "Unauthorization Token."
components:
  schemas:
      UserInput:
        type: object
        properties:
          student_id:
            type: string
            example: "6630000021"
          first_name:
            type: string
            example: John
          last_name:
            type: string
            example: Doe
          nick_name:
            type: string
            example: Joe
          year:
            type: string
            example: "1"
            enum:
              - "1"
              - "2"
              - "3"
              - "4"
              - "graduated"
          major:
            type: string
            example: "CEDT"
          role:
            type: string
            example: "admin"
            enum:
              - admin
              - user
              - pending
              - member
              - core
          password:
            type: string
            example: "666"
          image:
            type: file
            example: "https://stepoutsite.s3.ap-southeast-1.amazonaws.com/image/6633074721.webp"
          telephone:
            type: string
            example: "0123456789"
          instagram:
            type: string
            example: "stepout_intania"
          line:
            type: string
            example: "@stepoutintania"
        xml:
          name: user
      UserOutput:
        type: object
        properties:
          student_id:
            type: string
            exmaple: "6630000021"
          first_name:
            type: string
            example: John
          last_name:
            type: string
            example: Doe
          nick_name:
            type: string
            example: Joe
          year:
            type: string
            example: "1"
            enum:
              - "1"
              - "2"
              - "3"
              - "4"
              - "graduated"
          major:
            type: string
            example: "CEDT"
          role:
            type: string
            example: "admin"
            enum:
              - admin
              - user
              - pending
              - member
              - core
          image:
            type: string
            example: "https://stepoutsite.s3.ap-southeast-1.amazonaws.com/image/6633074721.webp"
          telephone:
            type: string
            example: "0123456789"
          instagram:
            type: string
            example: "stepout_intania"
          line:
            type: string
            example: "@stepoutintania"
        xml:
          name: user
      Kneepads:
        type: object
        properties:
          number:
            type: string
            example: "00"
          size:
            type: string
            example: "S"
          status:
            type: string
            example: "available"
          booking_date:
            type: string
            example: "01-01-2021"
          return_date:
            type: string
            example: "01-02-2021"
          student_id:
            type: string
            example: "6630000021"    
        xml:
          name: kneepads
      Event:
        type: object
        properties: 
          event_name:
            type: string
            example: Freshy Game 2029
          day:
            type: string
            example: 19/09/2029
          time:
            type: string
            example: 19:00
          place:
            type: string
            example: LarnIntania
          song:
            type: array
            items:
              type: string
            example: ["feat","hot2hot"]
          description:
            type: string
            example:  โชว์สุดปังขนาดนี้จะพลาดได้ไง ₊⊹ 13.09.2024 @ Thephasadin Stadium หน้าสแตนด์เชียร์ฝั่งประตูใหญ่ 20.00 onwards
          image:
            type: string
            example: https://stepoutsite.s3.ap-southeast-1.amazonaws.com/image/FreshyGame2024.webp
        xml:
          name: event
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Token
      in: header
      name: Authorization

tags:
  - name: user
  - name: kneepads
  - name: event